// <auto-generated />
using System;
using Auction;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Auction.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Auction.Entities.BiddingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("Bid")
                        .HasColumnType("double");

                    b.Property<double>("FinalPrice")
                        .HasColumnType("double");

                    b.Property<Guid>("LotId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Biddings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23b34e24-c0dc-4885-8aa9-278f3f6ba6e2"),
                            Bid = 0.0,
                            FinalPrice = 1000.0,
                            LotId = new Guid("92ac8d50-a4f5-49d0-a70e-908043919472"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("192b8331-a7d4-4128-97d1-0fe6e3f2fc16"),
                            Bid = 0.0,
                            FinalPrice = 1020.0,
                            LotId = new Guid("7c7e1068-076e-4e83-ac84-f77623dd0d0a"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Auction.Entities.LotEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("StartPrice")
                        .HasColumnType("double");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TradingDuration")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TradingStart")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Lots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12c434c3-f0fa-485b-833f-811fba946456"),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Earum, voluptas!",
                            Images = "https://img.freepik.com/free-photo/close-up-on-kitten-surrounded-by-flowers_23-2150782329.jpg?size=626&ext=jpg&ga=GA1.1.1413502914.1715558400&semt=ais_user",
                            Name = "Lot #1",
                            StartPrice = 937.10000000000002,
                            Tags = "Test",
                            TradingDuration = "2 days",
                            TradingStart = new DateTime(2020, 2, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("db3cbf94-7dbc-4e08-b3be-91c9d3b7a961")
                        },
                        new
                        {
                            Id = new Guid("3fdf1085-2e6c-40d8-8c13-718cda485bde"),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Earum, voluptas!",
                            Images = "https://img.freepik.com/free-photo/close-up-on-kitten-surrounded-by-flowers_23-2150782329.jpg?size=626&ext=jpg&ga=GA1.1.1413502914.1715558400&semt=ais_user",
                            Name = "Lot #1",
                            StartPrice = 937.10000000000002,
                            Tags = "Test",
                            TradingDuration = "2 days",
                            TradingStart = new DateTime(2020, 2, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("cad09093-da48-4282-b4b8-9d9711b5a14e")
                        });
                });

            modelBuilder.Entity("Auction.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1bc2046d-6992-4a19-a642-16c49ccd28e9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c24c46b-bf87-4bbe-9a92-01831b14da6d",
                            EmailConfirmed = false,
                            IsBlocked = false,
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$k11P4pbuCkAtqoySzkv8Le7xScvE4HGTt21EKqCLEyMWD2tWsB8ru",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            TwoFactorEnabled = false,
                            UserName = "Tom"
                        },
                        new
                        {
                            Id = new Guid("2af5f100-19a0-4679-99c6-78fc17362ab2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fca20db0-103e-4dbb-b3b6-6a7c08147b17",
                            EmailConfirmed = false,
                            IsBlocked = false,
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$gW8qklPMoGcZriPWgrW/teA/yB7y6eUe84HSNgPrpxWAr5ZdbWBEu",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            TwoFactorEnabled = false,
                            UserName = "Jerry"
                        },
                        new
                        {
                            Id = new Guid("309e00a7-4c0f-4bcd-82db-dfbc83461a14"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8ea105a-e7e6-4fff-9f6a-3576887108f0",
                            EmailConfirmed = false,
                            IsBlocked = false,
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$sIdIAwtpdq9M4MuMuM8/3eS04jwl0vypGvMG.L2oWhcUnYczSH5IO",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            TwoFactorEnabled = false,
                            UserName = "Bob"
                        });
                });

            modelBuilder.Entity("Auction.Entities.WalletEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("Balance")
                        .HasColumnType("double");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("785f8f78-44cf-4a1c-b463-19cf3333eb83"),
                            Balance = 1000000.0,
                            UserId = new Guid("81f10772-d815-4c8c-b881-316f6ea83d81")
                        },
                        new
                        {
                            Id = new Guid("4c7ea6df-fee7-47f0-a21a-860123c8e282"),
                            Balance = 1004300.0,
                            UserId = new Guid("ee66d7a0-47f3-454c-b1a6-cdc2dfc73f36")
                        },
                        new
                        {
                            Id = new Guid("56a051af-1bc3-48fd-9bc5-75f884e6cbea"),
                            Balance = 1023100.0,
                            UserId = new Guid("4239751e-e234-4f7e-b734-4fd77f285beb")
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
