// <auto-generated />
using System;
using Auction;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Auction.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Auction.Entities.BiddingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("Bid")
                        .HasColumnType("double");

                    b.Property<double>("FinalPrice")
                        .HasColumnType("double");

                    b.Property<Guid>("LotId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Biddings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("275116f2-a053-4e57-bb03-4dca5498fc1e"),
                            Bid = 0.0,
                            FinalPrice = 1000.0,
                            LotId = new Guid("ce68d480-b9b0-472b-891a-0d54bed32406"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("04dcc24a-6f71-4f8c-bdb1-d5b8eb42548f"),
                            Bid = 0.0,
                            FinalPrice = 1020.0,
                            LotId = new Guid("f1595851-7944-43bf-8f9a-fdf952091566"),
                            UserId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Auction.Entities.LotEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("StartPrice")
                        .HasColumnType("double");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TradingDuration")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TradingStart")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Lots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6b88209-eafe-489b-8d1d-82930605bfab"),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Earum, voluptas!",
                            Images = "https://img.freepik.com/free-photo/close-up-on-kitten-surrounded-by-flowers_23-2150782329.jpg?size=626&ext=jpg&ga=GA1.1.1413502914.1715558400&semt=ais_user",
                            Name = "Lot #1",
                            StartPrice = 937.10000000000002,
                            Tags = "Test",
                            TradingDuration = "2 days",
                            TradingStart = new DateTime(2020, 2, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("4fce8e49-6b11-43c4-9a30-0a89f4a97ce7")
                        },
                        new
                        {
                            Id = new Guid("6be00f42-5a04-4283-8a98-881710ac7667"),
                            Description = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Earum, voluptas!",
                            Images = "https://img.freepik.com/free-photo/close-up-on-kitten-surrounded-by-flowers_23-2150782329.jpg?size=626&ext=jpg&ga=GA1.1.1413502914.1715558400&semt=ais_user",
                            Name = "Lot #1",
                            StartPrice = 937.10000000000002,
                            Tags = "Test",
                            TradingDuration = "2 days",
                            TradingStart = new DateTime(2020, 2, 10, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("7147d021-e603-4bd1-8706-9864ce124f00")
                        });
                });

            modelBuilder.Entity("Auction.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("152e4050-7d88-45cb-9b90-122750c0366e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "177acc12-7a38-4b11-bc9e-b52be5c3dde4",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$3yT/5zmK6XxjKPsshjwLZOUbKhrIJvr2jr24.oNb.T449s4ZDKyh2",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Tom"
                        },
                        new
                        {
                            Id = new Guid("d1c5077f-7810-461f-a0a5-bf202299e060"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d8f98dd-cd3d-4edb-b9bb-ea3f077f7336",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$70R.Hq0OPSkJfmqOXtNmieC03GvTwj0x8pKylEtN04PjjlaeFfVNm",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Jerry"
                        },
                        new
                        {
                            Id = new Guid("74160c9b-b36d-4d3a-adc3-fd6751faf06c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "349fbb1c-887f-456f-9414-d49f1ed4d513",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$rOWaFBDx/Yrn9f6yUVszgOyfR6s/w3ghhlep7Mv/WPXW8/gYGFDta",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Bob"
                        });
                });

            modelBuilder.Entity("Auction.Entities.WalletEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("Balance")
                        .HasColumnType("double");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("339c5a45-8fee-4d26-8f8d-d0bd0cf5b120"),
                            Balance = 1000000.0,
                            UserId = new Guid("d3041f3d-180f-45c1-a8dc-39e700debddb")
                        },
                        new
                        {
                            Id = new Guid("a1685adf-a065-41dd-a5fd-e23db3f74fa8"),
                            Balance = 1004300.0,
                            UserId = new Guid("f5166248-8423-4a57-8599-025d71490f2d")
                        },
                        new
                        {
                            Id = new Guid("34baed56-65b9-4e6c-aabc-4a5d58f9706c"),
                            Balance = 1023100.0,
                            UserId = new Guid("fc1e7b24-6cf2-4f1c-a23b-d00c32b7263f")
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
